import data.matrix.basic
import analysis.normed_space.inner_product
import algebra.big_operators.default

open_locale big_operators
open is_R_or_C

------------------------------------------------------------------------------
-- ‚Ñù lemmas

lemma real.le_of_le_pow_two {a b : ‚Ñù} : a^2 ‚â§ b^2 ‚Üí 0 ‚â§ a ‚Üí 0 ‚â§ b ‚Üí a ‚â§ b
:= begin
    intros h an bn,
    rw <- real.sqrt_mul_self an,
    rw <- real.sqrt_mul_self bn,
    iterate 2 { rw pow_two at h },
    apply real.sqrt_le_sqrt; assumption,
end


------------------------------------------------------------------------------
-- Begining of the namespace `matrix`

namespace matrix

-- We could use `has_star.star`, but `inner_product_space` expects `is_R_or_C` anyways.
local notation x `‚Ä†`:90 := is_R_or_C.conj x
local notation |x| := is_R_or_C.abs x


------------------------------------------------------------------------------
-- matrix.conj for vectors

section conjugate

variables {ùïú : Type} [is_R_or_C ùïú]
variables {m : Type}

/--
Conjugate of a vector.
-/
def conj (v : m ‚Üí ùïú) : m ‚Üí ùïú := Œª i : m, (v i)‚Ä†

end conjugate


------------------------------------------------------------------------------
-- matrix.conj lemmas

section conj_lemmas

variables {ùïú : Type} [is_R_or_C ùïú]
variables {m : Type}
variables {x y : m ‚Üí ùïú}

variable {s : ùïú}

@[simp]
lemma conj_zero : conj 0 = (0 : m ‚Üí ùïú)
:= begin
    unfold conj,
    ext1 i, simp,
end

lemma conj_smul : conj (s ‚Ä¢ x) = s‚Ä† ‚Ä¢ conj x
:= begin
    unfold conj,
    ext1 i,
    iterate 2 { rw pi.smul_apply }, simp,
end

lemma conj_add : conj (x + y) = conj x + conj y
:= begin
    unfold conj,
    ext1 i,
    iterate 2 { rw pi.add_apply }, simp,
end

lemma conj_neg : conj (-x) = - conj x
:= begin
    unfold conj,
    ext1 i,
    simp,
end

end conj_lemmas


------------------------------------------------------------------------------
-- matrix.inner_product for vectors

section inner_product

variables {ùïú : Type} [is_R_or_C ùïú]
variables {m : Type} [fintype m]

/--
Inner product of vectors.
Following analysis.normed_space.inner_product's convention that
inner products are conjugate linear in the first argument and linear
in the second.
-/
def inner_product (x y : m ‚Üí ùïú) : ùïú := dot_product (conj x) y

instance : has_inner ùïú (m ‚Üí ùïú) := ‚ü®inner_product‚ü©

end inner_product

-- `‚ü™x, y‚ü´` : inner product notation.
-- `‚ü® , ‚ü©` is already taken in Lean. So, use  `‚ü™ , ‚ü´`, instead.
-- Also, it's consistent with analysis.normed_space.inner_product's other notations.
local notation `‚ü™` X `,` Y `‚ü´` := inner_product X Y


------------------------------------------------------------------------------
-- matrix.inner_product lemmas

section inner_product_lemmas

variables {ùïú : Type} [is_R_or_C ùïú]
variables {m : Type} [fintype m]
variables {x y z : m ‚Üí ùïú}

lemma inner_product_self_eq_sum_conj_mul : ‚ü™x, x‚ü´ = ‚àë i, ((x i)‚Ä†) * x i := by refl

lemma inner_product_self_eq_sum_norm_sq : ‚ü™x, x‚ü´ = ‚àë i, norm_sq (x i)
:= begin
    rw inner_product_self_eq_sum_conj_mul,
    congr, apply funext, intro i,
    rw conj_mul_eq_norm_sq_left,
end

@[simp]
lemma inner_product_self_im_zero : im ‚ü™x, x‚ü´ = 0
:= begin
    rw inner_product_self_eq_sum_norm_sq,
    rw <- finset.univ.sum_hom im,
    apply finset.sum_eq_zero, intros i ip, simp,
    split, simp,
end

@[simp]
lemma inner_product_self_re_eq_self : (re ‚ü™x,x‚ü´ : ùïú) = ‚ü™x,x‚ü´
:= begin
    rw inner_product_self_eq_sum_norm_sq,
    rw <- finset.univ.sum_hom re, {
        simp,
    }, {
        split, simp,
    }
end

-- Positive semi-definite or nonnegative-definite
@[simp]
lemma inner_product_self_re_nonneg (x : m ‚Üí ùïú) : 0 ‚â§ re ‚ü™x, x‚ü´
:= begin
    rw inner_product_self_eq_sum_norm_sq,
    rw <- finset.univ.sum_hom re, {
        apply finset.sum_nonneg,
        intros i ip, simp,
        apply norm_sq_nonneg,
    }, {
        split, simp,
    }
end

-- Point-separating or non-degenerate
lemma inner_product_self_zero : ‚ü™x, x‚ü´ = 0 ‚Üí x = 0
:= begin
    rw inner_product_self_eq_sum_norm_sq,
    intros h,

    have h': ‚àë (i : m), norm_sq (x i) = 0, {
        apply_mod_cast h,
    },
    clear h,

    have f1: ‚àÄ i, norm_sq (x i) = 0, {
        intro i,
        apply (finset.sum_eq_zero_iff_of_nonneg _).mp h'; simp,
        intros, apply norm_sq_nonneg,
    },

    have f2: ‚àÄ i, x i = 0, {
        intros i,
        apply norm_sq_eq_zero.mp; apply f1,
    },

    ext i,
    apply f2,
end

lemma inner_product_self_add : ‚ü™x+y , x+y‚ü´ = ‚ü™x,x‚ü´ + ‚ü™x,y‚ü´ + ‚ü™y,x‚ü´ + ‚ü™y,y‚ü´
:= begin
    unfold inner_product,
    rw conj_add,
    repeat { rw add_dot_product },
    repeat { rw dot_product_add },
    ring,
end

@[simp]
lemma inner_product_self_neg : ‚ü™-x, -x‚ü´ = ‚ü™x, x‚ü´
:= begin
    unfold inner_product,
    rw conj_neg, simp,
end

variable {s : ùïú}

lemma inner_product_smul_l {s : ùïú} : ‚ü™s ‚Ä¢ x, y‚ü´ = (s‚Ä†) * ‚ü™x, y‚ü´
:= begin
    unfold inner_product,
    rw conj_smul,
    rw smul_dot_product,
end

lemma inner_product_smul_r {s : ùïú} : ‚ü™x, s ‚Ä¢ y‚ü´ = s * ‚ü™x, y‚ü´
:= begin
    unfold inner_product,
    rw dot_product_smul,
end

lemma inner_product_add_left : ‚ü™x + y, z‚ü´ = ‚ü™x, z‚ü´ + ‚ü™y, z‚ü´
:= begin
    unfold inner_product,
    rw conj_add,
    rw add_dot_product,
end

lemma inner_product_add_right : ‚ü™x, y + z‚ü´ = ‚ü™x, y‚ü´ + ‚ü™x, z‚ü´
:= begin
    unfold inner_product,
    rw dot_product_add,
end

@[simp]
lemma inner_product_zero_r : ‚ü™x,(0 : m ‚Üí ùïú)‚ü´ = 0
:= by { unfold inner inner_product, simp, }

@[simp]
lemma inner_product_zero_l : ‚ü™(0 : m ‚Üí ùïú),x‚ü´ = 0
:= by { unfold inner inner_product, simp, }

@[simp]
lemma conj_inner_product : ‚ü™y, x‚ü´‚Ä† = ‚ü™x, y‚ü´
:= begin
    unfold matrix.inner_product,
    unfold matrix.dot_product,
    rw <- finset.univ.sum_hom is_R_or_C.conj, {
        congr' 1, apply funext, intro i,
        unfold conj,
        simp, ring,
    }, {
        split; simp,
    }
end

lemma inner_product_mul_eq_norm_sq : ‚ü™x, y‚ü´ * ‚ü™y, x‚ü´ = norm_sq ‚ü™y, x‚ü´
:= begin
    rw <- conj_inner_product,
    rw conj_mul_eq_norm_sq_left,
end

lemma abs_inner_product_comm : |‚ü™x, y‚ü´| = |‚ü™y, x‚ü´|
:= begin
    rw <- conj_inner_product,
    rw is_R_or_C.abs_conj,
end

lemma re_inner_product_comm : re ‚ü™x, y‚ü´ = re ‚ü™y, x‚ü´
:= begin
    rw <- conj_inner_product,
    apply conj_re,
end

end inner_product_lemmas


------------------------------------------------------------------------------
-- matrix.norm for a vector

section norm

variables {ùïú : Type} [is_R_or_C ùïú]
variables {m : Type} [fintype m]

/--
Norm of a vector
-/
noncomputable
def norm (x : m ‚Üí ùïú) : ‚Ñù := (re ‚ü™x, x‚ü´).sqrt

noncomputable
instance : has_norm (m ‚Üí ùïú) := ‚ü®norm‚ü©

-- Use the standard norm notation of `‚à•x‚à•`

end norm


------------------------------------------------------------------------------
-- matrix.norm lemmas

section norm_lemmas

variables {ùïú : Type} [is_R_or_C ùïú]
variables {m : Type} [fintype m]
variables {x : m ‚Üí ùïú}

lemma norm_smul (s : ùïú) : norm (s ‚Ä¢ x) = ‚à•s‚à• * norm x
:= begin
    have f1: ‚à•s‚à• = real.sqrt (norm_sq s), {
        rw norm_sq_eq_abs,
        rw pow_two,
        rw real.sqrt_mul_self, {
            apply norm_eq_abs,
        }, {
            apply is_R_or_C.abs_nonneg,
        }
    },
    rw f1, clear f1,

    unfold norm,
    rw inner_product_smul_l,
    rw inner_product_smul_r,
    rw <- mul_assoc,
    rw conj_mul_eq_norm_sq_left,
    simp,
end

@[simp]
lemma norm_zero : norm (0 : m ‚Üí ùïú) = 0
:= begin
    unfold norm, simp [inner_product_self_eq_sum_norm_sq],
end

@[simp]
lemma norm_nonneg : 0 ‚â§ norm x
:= begin
    unfold norm, apply real.sqrt_nonneg,
end

@[simp]
lemma norm_neg : norm (-x) = norm x
:= begin
    unfold norm, simp,
end

end norm_lemmas


-- has_norm.norm lemmas for proof automation
section has_norm_lemmas

variables {ùïú : Type} [is_R_or_C ùïú]
variables {m : Type} [fintype m]
variables {x : m ‚Üí ùïú}

lemma has_norm_sq_eq_re_inner_product_self : ‚à•x‚à•^2 = re ‚ü™x, x‚ü´
:= begin
    unfold has_norm.norm norm,
    rw pow_two,
    rw real.mul_self_sqrt, simp,
end

@[simp]
lemma has_norm_zero : ‚à•(0 : m ‚Üí ùïú)‚à• = 0
:= begin
    unfold has_norm.norm norm, simp,
end

@[simp]
lemma has_norm_nonneg : 0 ‚â§ ‚à•x‚à•
:= begin
    unfold has_norm.norm norm,
    apply real.sqrt_nonneg,
end

end has_norm_lemmas


------------------------------------------------------------------------------
-- cauchy_schwarz_inequality

section cauchy_schwarz_inequality

variables {ùïú : Type} [is_R_or_C ùïú]
variables {m : Type} [fintype m]
variables {u v : m ‚Üí ùïú}

lemma cauchy_schwarz_inequality_step1 : ‚à•u + v‚à•^2 = (‚à•u‚à•^2 + re ‚ü™u,v‚ü´) + (re ‚ü™v,u‚ü´ + ‚à•v‚à•^2)
:= begin
    iterate 3 { rw has_norm_sq_eq_re_inner_product_self },
    repeat { rw pow_two },

    unfold inner inner_product,
    rw conj_add,
    rw dot_product_add,
    iterate 2 { rw add_dot_product },
    have vector_add_apply: ‚àÄ {i : m} {x y : m ‚Üí ùïú}, (x + y) i = (x i) + (y i), by {intros, simp},
    repeat { rw vector_add_apply },
    simp,
    ring,
end

lemma cauchy_schwarz_inequality_step2_1 : ‚ü™u,(-(‚ü™v,u‚ü´/‚ü™v,v‚ü´)) ‚Ä¢ v‚ü´ = -|‚ü™u,v‚ü´|^2/‚ü™v,v‚ü´
:= begin
    rw inner_product_smul_r,
    simp,
    ring,
    rw mul_assoc,
    rw mul_comm,
    rw mul_assoc,
    rw inner_product_mul_eq_norm_sq,
    rw norm_sq_eq_abs, simp,
end

lemma cauchy_schwarz_inequality_step2_2 : ‚ü™(-(‚ü™v,u‚ü´/‚ü™v,v‚ü´)) ‚Ä¢ v, u‚ü´ = -|‚ü™u,v‚ü´|^2/‚ü™v,v‚ü´
:= begin
    rw inner_product_smul_l,
    simp,
    rw is_R_or_C.conj_div,
    rw conj_inner_product,
    simp,
    ring,
    simp,
    rw mul_assoc,
    rw mul_comm,
    rw mul_assoc,
    rw inner_product_mul_eq_norm_sq,
    rw norm_sq_eq_abs,
    norm_cast,
    repeat { rw <- is_R_or_C.abs_to_complex },
    rw abs_inner_product_comm,
end

lemma cauchy_schwarz_inequality_step2_3 : v ‚â† 0 ‚Üí ‚à•-(‚ü™v,u‚ü´/‚ü™v,v‚ü´) ‚Ä¢ v‚à• ^ 2 = |‚ü™u,v‚ü´|^2/(re ‚ü™v,v‚ü´)
:= begin
    intro h,
    rw has_norm_sq_eq_re_inner_product_self,
    rw inner_product_smul_l,
    rw inner_product_smul_r,
    rw <- mul_assoc,

    have f1: (-(‚ü™v,u‚ü´ / ‚ü™v,v‚ü´))‚Ä† * (-(‚ü™v,u‚ü´ / ‚ü™v,v‚ü´))
           = norm_sq (‚ü™v,u‚ü´ / ‚ü™v,v‚ü´), {
        simp [conj_mul_eq_norm_sq_left],
    },
    rw f1, clear f1,
    rw norm_sq_div,
    simp,
    norm_cast,
    rw norm_sq_eq_abs,

    have f2: norm_sq ‚ü™v,v‚ü´ = re ‚ü™v,v‚ü´ * re ‚ü™v,v‚ü´, {
        unfold norm_sq, simp,
    },
    rw f2, clear f2,
    ring,
    congr' 1, {
        rw mul_inv',
        rw <- mul_assoc,
        rw mul_inv_cancel, simp *,
        revert h,
        contrapose!,
        intro h,
        apply inner_product_self_zero,
        have f3: (re ‚ü™v,v‚ü´ : ùïú) = 0, {
            rw h, simp,
        },
        simp at f3, apply f3,
    }, {
        repeat { rw <- is_R_or_C.abs_to_complex },
        rw abs_inner_product_comm,
    }
end

-- The equality part.
lemma cauchy_schwarz_inequality_part1 :
        v ‚â† 0
        ‚Üí ‚à•u - (‚ü™v,u‚ü´/‚ü™v,v‚ü´) ‚Ä¢ v‚à• ^ 2 = ‚à•u‚à•^2 - re (|‚ü™u,v‚ü´|^2 / ‚ü™v,v‚ü´ : ùïú)
:= begin
    intros h,
    -- Step 1. Change the equation to (A + B) = (C + 0) form,
    have f1: u - (‚ü™v,u‚ü´/‚ü™v,v‚ü´) ‚Ä¢ v = u + (-(‚ü™v,u‚ü´/‚ü™v,v‚ü´)) ‚Ä¢ v, {
        simp, ring,
    },
    rw f1,
    rw cauchy_schwarz_inequality_step1,

    have f2: ‚à•u‚à•^2 - re (|‚ü™u,v‚ü´|^2 / ‚ü™v,v‚ü´ : ùïú) = (‚à•u‚à•^2 + re (-|‚ü™u,v‚ü´|^2 / ‚ü™v,v‚ü´ : ùïú)) + 0, {
        rw neg_div, simp, ring,
    },
    rw f2,

    -- Step 2. Solve individual sub-equations of A = C and B = 0.
    congr' 1, {
        congr' 1,
        have f3: re (‚ü™u,(-(‚ü™v,u‚ü´/‚ü™v,v‚ü´)) ‚Ä¢ v‚ü´) = re (-|‚ü™u,v‚ü´|^2/‚ü™v,v‚ü´ : ùïú), {
            rw cauchy_schwarz_inequality_step2_1,
        },
        apply f3,
    }, {
        rw cauchy_schwarz_inequality_step2_2,
        rw cauchy_schwarz_inequality_step2_3 h,
        have f4: ‚àÄ {r s : ‚Ñù}, r = -s ‚Üí r + s = 0, {intros r s h, rw h, simp,},
        apply f4,
        have f5: ‚àÄ {r s : ‚Ñù}, -(r/s) = re (-r / s : ùïú), {
            intros, norm_cast, ring,
        },
        rw f5, clear f5, simp,
    }
end

theorem cauchy_schwarz_inequality : |‚ü™u,v‚ü´|^2 ‚â§ ‚à•u‚à•^2 * ‚à•v‚à•^2
:= begin
    by_cases h: v = 0, {
        rw h,
        repeat { rw pow_two },
        simp,
    },

    -- case h: v ‚â† 0,
    have f1: 0 ‚â§ ‚à•u‚à•^2 - re (|‚ü™u,v‚ü´|^2 / ‚ü™v,v‚ü´ : ùïú), {
        rw <- cauchy_schwarz_inequality_part1; try {assumption},
        rw has_norm_sq_eq_re_inner_product_self, simp,
    },
    have f2: re (|‚ü™u,v‚ü´|^2 / ‚ü™v,v‚ü´ : ùïú) ‚â§ ‚à•u‚à•^2, {
        have g1: ‚àÄ (r s : ‚Ñù), 0 ‚â§ r - s ‚Üí s ‚â§ r, simp,
        apply g1,
        apply f1,
    },
    have f3: |‚ü™u,v‚ü´|^2 / ‚à•v‚à•^2 ‚â§ ‚à•u‚à•^2, {
        rw has_norm_sq_eq_re_inner_product_self,
        have f3': ‚àÄ {r s : ‚Ñù}, r/s = re (r / s : ùïú), {
            intros, norm_cast,
        },
        rw f3', simp,
        apply_mod_cast f2,
    },
    clear f1 f2,
    apply (div_le_iff _).mp; try {assumption},
    clear f3,
    rw has_norm_sq_eq_re_inner_product_self,

    let f4 := inner_product_self_re_nonneg v,
    have f5: re ‚ü™v,v‚ü´ ‚â† 0, {
        revert h, contrapose!, intro h,
        apply inner_product_self_zero,
        have f5': (re ‚ü™v,v‚ü´ : ùïú) = 0, {
            rw h, simp,
        },
        simp at f5', apply f5',
    },

    by_contradiction c,
    push_neg at c,
    apply f5, clear f5,
    linarith,
end

lemma cauchy_schwarz_inequality_alt : |‚ü™u,v‚ü´| ‚â§ ‚à•u‚à• * ‚à•v‚à•
:= begin
    apply real.le_of_le_pow_two, {
        calc |‚ü™u,v‚ü´|^2 ‚â§ ‚à•u‚à•^2 * ‚à•v‚à•^2 : cauchy_schwarz_inequality
                   ... = (‚à•u‚à• * ‚à•v‚à•)^2 : by ring,
    }, {
        apply is_R_or_C.abs_nonneg,
    }, {
        apply mul_nonneg; simp,
    }
end

end cauchy_schwarz_inequality


------------------------------------------------------------------------------
section triangle_inequality
-- Wikipedia proof: depends on Cauchy-Schwarz inequality

variables {ùïú : Type} [is_R_or_C ùïú]
variables {m : Type} [fintype m]
variables {x y : m ‚Üí ùïú}

lemma norm_sq_add_le_add_norm_sq : ‚à•x + y‚à•^2 ‚â§ (‚à•x‚à• + ‚à•y‚à•)^2
:= begin
    -- Part 1. expand both sides of inequality
    rw has_norm_sq_eq_re_inner_product_self,
    rw inner_product_self_add,
    simp,

    repeat { rw pow_two },
    repeat { rw add_mul },
    repeat { rw mul_add },
    repeat { rw <- pow_two },
    repeat { rw has_norm_sq_eq_re_inner_product_self },

    have f0: re ‚ü™y,x‚ü´ = re ‚ü™x,y‚ü´, {
        rw re_inner_product_comm,
    },
    rw f0, clear f0,
    have f1: re ‚ü™x,x‚ü´ + re ‚ü™x,y‚ü´ + re ‚ü™x,y‚ü´ + re ‚ü™y,y‚ü´ = (re ‚ü™x,x‚ü´ + re ‚ü™y,y‚ü´) + (2 * re ‚ü™x,y‚ü´), {
        ring,
    },
    rw f1, clear f1,
    have f2: re ‚ü™x,x‚ü´ + ‚à•x‚à• * ‚à•y‚à• + (‚à•y‚à• * ‚à•x‚à• + re ‚ü™y,y‚ü´) = (re ‚ü™x,x‚ü´ + re ‚ü™y,y‚ü´) + 2 * ‚à•x‚à• * ‚à•y‚à•, {
        ring,
    },
    rw f2, clear f2,

    -- Part 2. simplify inequality by canceling out identical terms
    simp,
    rw mul_assoc,

    have f3: re ‚ü™x,y‚ü´ ‚â§ (‚à•x‚à• * ‚à•y‚à•) ‚Üí 2 * re ‚ü™x,y‚ü´ ‚â§ 2 * (‚à•x‚à• * ‚à•y‚à•), {
        intros h, linarith,
    },
    apply f3, clear f3,

    -- Part 3. solve the main inequality using Cauchy-Schwarz_inequality
    have f1: re ‚ü™x,y‚ü´ ‚â§ |re ‚ü™x,y‚ü´|, {
        simp, apply le_abs_self,
    },
    have f2: |re ‚ü™x,y‚ü´| ‚â§ |‚ü™x,y‚ü´|, {
        simp, apply abs_re_le_abs,
    },
    calc re ‚ü™x,y‚ü´ ‚â§ |re ‚ü™x,y‚ü´| : f1
              ... ‚â§ |‚ü™x,y‚ü´| : f2
              ... ‚â§ ‚à•x‚à• * ‚à•y‚à• : cauchy_schwarz_inequality_alt,
end

lemma triangle_inequality : ‚à•x + y‚à• ‚â§ ‚à•x‚à• + ‚à•y‚à•
:= begin
    apply real.le_of_le_pow_two; try {solve1 {simp}}, {
        apply norm_sq_add_le_add_norm_sq,
    }, {
        apply add_nonneg; simp,
    }
end

end triangle_inequality


------------------------------------------------------------------------------
-- dist

section dist

variables {ùïú : Type} [is_R_or_C ùïú]
variables {m : Type} [fintype m]

/--
Distance between two vectors
-/
noncomputable
def dist (x y : m ‚Üí ùïú) := norm (x - y)

noncomputable
instance : has_dist (m ‚Üí ùïú) := ‚ü®dist‚ü©

end dist


------------------------------------------------------------------------------
-- dist lemmas

section dist_lemmas

variables {ùïú : Type} [is_R_or_C ùïú]
variables {m : Type} [fintype m]
variables {x y z : m ‚Üí ùïú}

lemma dist_self : dist x x = 0
:= begin
    unfold dist, simp,
end

lemma eq_of_dist_eq_zero : dist x y = 0 ‚Üí x = y
:= begin
    intros h,
    have h': (dist x y) ^ 2 = 0, {
        rw h, simp,
    },
    have f1: ‚ü™x - y, x - y‚ü´ = (0 : ùïú), {
        unfold has_dist.dist dist norm at h',
        rw pow_two at h',
        rw real.mul_self_sqrt at h', {
            rw <- inner_product_self_re_eq_self,
            apply_mod_cast h',
        }, {
            simp,
        }
    },
    have f2: x - y = 0, {
        apply inner_product_self_zero f1,
    },
    have f2': x - y = y - y, {
        rw f2, simp,
    },
    apply sub_left_inj.mp f2',
end

lemma dist_comm : dist x y = dist y x
:= begin
    unfold has_dist.dist dist,
    have f1: y - x = -(x - y), simp,
    rw f1,
    rw norm_neg,
end

lemma dist_triangle : dist x z ‚â§ dist x y + dist y z
:= begin
    unfold dist,
    have f1: x - z = (x - y) + (y - z), by abel,
    rw f1, clear f1,
    apply triangle_inequality,
end

end dist_lemmas


------------------------------------------------------------------------------
-- normed_group

section normed_group

variables {ùïú : Type} [is_R_or_C ùïú]
variables {m : Type} [fintype m]
variables {x y z : m ‚Üí ùïú}

noncomputable
instance : metric_space (m ‚Üí ùïú) := {
    dist               := dist,
    dist_self          := by {apply dist_self},
    eq_of_dist_eq_zero := by {apply eq_of_dist_eq_zero},
    dist_comm          := by {apply dist_comm},
    dist_triangle      := by {apply dist_triangle},
}

lemma dist_eq (x y : m ‚Üí ùïú) : dist x y = ‚à•x - y‚à• := by refl

noncomputable
instance : normed_group (m ‚Üí ùïú) := ‚ü® dist_eq ‚ü©

end normed_group


------------------------------------------------------------------------------
-- inner_product_space

section inner_product_space

variables {ùïú : Type} [is_R_or_C ùïú]
variables {m : Type} [fintype m]
variables {x : m ‚Üí ùïú}

noncomputable
instance : normed_space ùïú (m ‚Üí ùïú) := {
    norm_smul_le := by {
        intros,
        unfold has_norm.norm,
        rw norm_smul,
    }
}

noncomputable
instance : inner_product_space ùïú (m ‚Üí ùïú) := {
    norm_sq_eq_inner := by {unfold inner, intros, rw has_norm_sq_eq_re_inner_product_self},
    conj_sym := by {unfold inner, intros, rw <- conj_inner_product, simp},
    nonneg_im := by {unfold inner, intros x, simp},
    add_left := by {unfold inner, apply inner_product_add_left},
    smul_left := by {unfold inner, apply inner_product_smul_l},
}

end inner_product_space


------------------------------------------------------------------------------
-- End of namespace `matrix`

end matrix
